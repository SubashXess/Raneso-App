{
    "sourceFile": "lib/widgets/search_delegate.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1700987870266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1700987870266,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport '../models/models.dart';\r\n\r\nclass Search extends SearchDelegate {\r\n  List<ListModel> filteredList = ListModel.generatedItem;\r\n\r\n  @override\r\n  List<Widget>? buildActions(BuildContext context) {\r\n    return [\r\n      IconButton(\r\n        onPressed: () {\r\n          query = '';\r\n        },\r\n        icon: const Icon(\r\n          Icons.clear_rounded,\r\n          size: 20.0,\r\n        ),\r\n      ),\r\n    ];\r\n  }\r\n\r\n  @override\r\n  Widget? buildLeading(BuildContext context) {\r\n    return IconButton(\r\n      onPressed: () => Navigator.pop(context),\r\n      icon: const Icon(\r\n        Icons.arrow_back_rounded,\r\n        size: 20.0,\r\n      ),\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget buildResults(BuildContext context) {\r\n    return buildListView(filteredList);\r\n  }\r\n\r\n  @override\r\n  Widget buildSuggestions(BuildContext context) {\r\n    filteredList = query.isEmpty\r\n        ? ListModel.generatedItem\r\n        : ListModel.generatedItem\r\n            .where((item) =>\r\n                item.title.toLowerCase().contains(query.toLowerCase()) ||\r\n                item.subtitle.toLowerCase().contains(query.toLowerCase()))\r\n            .toList();\r\n\r\n    return buildListView(filteredList);\r\n  }\r\n\r\n  Widget buildListView(List<ListModel> items) {\r\n    return ListView.separated(\r\n      itemCount: items.length,\r\n      shrinkWrap: true,\r\n      padding: const EdgeInsets.symmetric(vertical: 16.0),\r\n      itemBuilder: (context, index) {\r\n        final item = items[index];\r\n        return InkWell(\r\n          onTap: () {},\r\n          child: Container(\r\n            width: double.infinity,\r\n            padding: const EdgeInsets.all(16.0),\r\n            child: Row(\r\n              mainAxisSize: MainAxisSize.max,\r\n              children: [\r\n                Expanded(\r\n                  child: Column(\r\n                    crossAxisAlignment: CrossAxisAlignment.start,\r\n                    children: [\r\n                      Text(\r\n                        item.title,\r\n                        style: const TextStyle(\r\n                            fontSize: 18.0, fontWeight: FontWeight.w600),\r\n                      ),\r\n                      const SizedBox(height: 4.0),\r\n                      Text(\r\n                        item.subtitle,\r\n                        style: const TextStyle(\r\n                            fontSize: 14.0, color: Colors.black45),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ),\r\n                const SizedBox(width: 10.0),\r\n                Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.end,\r\n                  children: [\r\n                    Text(\r\n                      '\\$${item.price}',\r\n                      style: const TextStyle(\r\n                          fontSize: 18.0, fontWeight: FontWeight.w600),\r\n                    ),\r\n                    const SizedBox(height: 4.0),\r\n                    Container(\r\n                      padding: const EdgeInsets.symmetric(\r\n                          horizontal: 8.0, vertical: 2.0),\r\n                      decoration: BoxDecoration(\r\n                          borderRadius: BorderRadius.circular(8.0),\r\n                          color: item.profits.contains('+')\r\n                              ? Colors.green.shade600\r\n                              : Colors.redAccent),\r\n                      child: Text(\r\n                        item.profits,\r\n                        style: const TextStyle(\r\n                            fontSize: 14.0, color: Colors.white),\r\n                      ),\r\n                    ),\r\n                  ],\r\n                )\r\n              ],\r\n            ),\r\n          ),\r\n        );\r\n      },\r\n      separatorBuilder: (context, index) => const Divider(height: 0.0),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}